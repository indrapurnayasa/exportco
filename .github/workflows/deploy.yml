name: Deploy to VPS

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to VPS
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: ${{ secrets.VPS_PORT }}
        script: |
          # Navigate to project directory
          cd ~/exportco
          
          # Create deployment script if it doesn't exist
          cat > deploy.sh << 'EOF'
          #!/bin/bash
          
          echo "=========================================="
          echo "🚀 STARTING DEPLOYMENT"
          echo "=========================================="
          
          # Set domain
          DOMAIN="dev-ngurah.fun"
          
          # Kill any processes using our ports
          echo "🛑 Clearing ports..."
          ./kill-ports.sh
          
          # Pull latest code
          echo "📥 Pulling latest code..."
          git pull origin main
          
          # Activate conda environment
          echo "🐍 Activating conda environment..."
          source ~/miniconda3/etc/profile.d/conda.sh
          conda activate hackathon-env
          
          # Install/update dependencies
          echo "📦 Installing dependencies..."
          pip install -r requirements.txt
          
          # Check SSL certificate
          echo "🔐 Checking SSL certificate..."
          if ! sudo certbot certificates | grep -q "$DOMAIN"; then
              echo "⚠️  SSL certificate not found, generating..."
              sudo systemctl stop nginx
              sudo certbot certonly --standalone -d $DOMAIN -d www.$DOMAIN --non-interactive --agree-tos --email admin@$DOMAIN
              sudo systemctl start nginx
          fi
          
          # Create/update nginx configuration
          echo "🌐 Updating nginx configuration..."
          sudo tee /etc/nginx/sites-available/$DOMAIN << 'NGINX_EOF'
          server {
              listen 80;
              server_name $DOMAIN www.$DOMAIN;
              return 301 https://$server_name$request_uri;
          }
          
          server {
              listen 443 ssl http2;
              server_name $DOMAIN www.$DOMAIN;
              
              ssl_certificate /etc/letsencrypt/live/$DOMAIN/fullchain.pem;
              ssl_certificate_key /etc/letsencrypt/live/$DOMAIN/privkey.pem;
              
              ssl_protocols TLSv1.2 TLSv1.3;
              ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;
              ssl_prefer_server_ciphers off;
              
              location / {
                  proxy_pass http://127.0.0.1:8000;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
              }
          }
          NGINX_EOF
          
          # Enable nginx configuration
          sudo rm -f /etc/nginx/sites-enabled/*
          sudo ln -s /etc/nginx/sites-available/$DOMAIN /etc/nginx/sites-enabled/
          
          # Test and reload nginx
          sudo nginx -t
          sudo systemctl reload nginx
          
          # Start FastAPI service
          echo "🚀 Starting FastAPI service..."
          ./start-production-ssl.sh
          
          # Wait a moment for services to start
          sleep 5
          
          # Check service status
          echo "📊 Checking service status..."
          ./status-production-ssl.sh
          
          # Test the service
          echo "🧪 Testing service..."
          curl -I https://$DOMAIN/api/v1/export/seasonal-trend
          
          echo "✅ Deployment completed!"
          echo "🌐 Your API is available at: https://$DOMAIN"
          EOF
          
          # Make deployment script executable
          chmod +x deploy.sh
          
          # Run deployment
          ./deploy.sh 