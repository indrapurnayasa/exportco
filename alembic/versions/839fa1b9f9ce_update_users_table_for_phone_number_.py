"""Update users table for phone number authentication

Revision ID: 839fa1b9f9ce
Revises: 
Create Date: 2025-07-20 20:23:45.232849

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '839fa1b9f9ce'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('user_profiles')
    op.drop_table('embeddings')
    op.drop_table('export_recommendations')
    op.alter_column('currency_rates', 'base_currency',
               existing_type=sa.CHAR(length=3),
               type_=sa.String(length=3),
               existing_nullable=False)
    op.alter_column('currency_rates', 'target_currency',
               existing_type=sa.CHAR(length=3),
               type_=sa.String(length=3),
               existing_nullable=False)
    op.drop_index('idx_bps_exim_created_at', table_name='export_data')
    op.drop_index('idx_bps_exim_ctr', table_name='export_data')
    op.drop_index('idx_bps_exim_pod', table_name='export_data')
    op.drop_index('idx_bps_exim_provorig', table_name='export_data')
    op.drop_index('idx_bps_exim_tahun', table_name='export_data')
    op.drop_index('idx_export_data_commodity', table_name='export_data', postgresql_where='(comodity_code IS NOT NULL)')
    op.drop_index('idx_export_data_commodity_country', table_name='export_data', postgresql_where='((comodity_code IS NOT NULL) AND (ctr_code IS NOT NULL) AND (netweight IS NOT NULL))')
    op.drop_index('idx_export_data_country_demand', table_name='export_data', postgresql_where='((ctr_code IS NOT NULL) AND (value IS NOT NULL))')
    op.drop_index('idx_export_data_seasonal_trend', table_name='export_data', postgresql_where='((comodity_code IS NOT NULL) AND (netweight IS NOT NULL))')
    op.drop_index('idx_export_data_value', table_name='export_data', postgresql_where='(value IS NOT NULL)')
    op.drop_index('idx_export_data_year_month', table_name='export_data')
    op.drop_index('idx_export_data_year_month_sort', table_name='export_data', postgresql_where='((tahun IS NOT NULL) AND (bulan IS NOT NULL))')
    op.create_index('idx_export_data_comodity_code', 'export_data', ['comodity_code'], unique=False)
    op.create_index('idx_export_data_created_at', 'export_data', ['created_at'], unique=False)
    op.create_index('idx_export_data_tahun_bulan', 'export_data', ['tahun', 'bulan'], unique=False)
    op.create_index('idx_export_data_tahun_comodity', 'export_data', ['tahun', 'comodity_code'], unique=False)
    op.alter_column('export_document', 'id_doc',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('export_document_country', 'id',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('export_document_country', 'id_doc',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.drop_constraint('export_document_country_id_doc_fkey', 'export_document_country', type_='foreignkey')
    op.add_column('export_duty_chunks', sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.drop_column('export_duty_chunks', 'metadata_doc')
    op.drop_index('idx_komoditi_kode', table_name='komoditi')
    op.drop_index('idx_komoditi_nama', table_name='komoditi')
    op.drop_column('komoditi', 'price_date')
    op.add_column('users', sa.Column('email', sa.String(), nullable=True))
    op.add_column('users', sa.Column('username', sa.String(), nullable=True))
    op.add_column('users', sa.Column('hashed_password', sa.String(), nullable=False))
    op.add_column('users', sa.Column('is_active', sa.Boolean(), nullable=True))
    op.add_column('users', sa.Column('is_superuser', sa.Boolean(), nullable=True))
    op.alter_column('users', 'name',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               nullable=False)
    op.alter_column('users', 'region',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('users', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.drop_constraint('users_phone_number_key', 'users', type_='unique')
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_index(op.f('ix_users_phone_number'), 'users', ['phone_number'], unique=True)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_phone_number'), table_name='users')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.create_unique_constraint('users_phone_number_key', 'users', ['phone_number'])
    op.alter_column('users', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('users', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('users', 'region',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('users', 'name',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               nullable=True)
    op.drop_column('users', 'is_superuser')
    op.drop_column('users', 'is_active')
    op.drop_column('users', 'hashed_password')
    op.drop_column('users', 'username')
    op.drop_column('users', 'email')
    op.add_column('komoditi', sa.Column('price_date', sa.VARCHAR(length=15), autoincrement=False, nullable=True))
    op.create_index('idx_komoditi_nama', 'komoditi', ['nama_komoditi'], unique=False)
    op.create_index('idx_komoditi_kode', 'komoditi', ['kode_komoditi'], unique=False)
    op.add_column('export_duty_chunks', sa.Column('metadata_doc', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.drop_column('export_duty_chunks', 'metadata')
    op.create_foreign_key('export_document_country_id_doc_fkey', 'export_document_country', 'export_document', ['id_doc'], ['id_doc'])
    op.alter_column('export_document_country', 'id_doc',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('export_document_country', 'id',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('export_document', 'id_doc',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.drop_index('idx_export_data_tahun_comodity', table_name='export_data')
    op.drop_index('idx_export_data_tahun_bulan', table_name='export_data')
    op.drop_index('idx_export_data_created_at', table_name='export_data')
    op.drop_index('idx_export_data_comodity_code', table_name='export_data')
    op.create_index('idx_export_data_year_month_sort', 'export_data', [sa.text('tahun DESC'), sa.text('bulan DESC')], unique=False, postgresql_where='((tahun IS NOT NULL) AND (bulan IS NOT NULL))')
    op.create_index('idx_export_data_year_month', 'export_data', ['tahun', 'bulan'], unique=False)
    op.create_index('idx_export_data_value', 'export_data', ['value'], unique=False, postgresql_where='(value IS NOT NULL)')
    op.create_index('idx_export_data_seasonal_trend', 'export_data', ['tahun', 'comodity_code', 'bulan', 'netweight'], unique=False, postgresql_where='((comodity_code IS NOT NULL) AND (netweight IS NOT NULL))')
    op.create_index('idx_export_data_country_demand', 'export_data', ['tahun', 'ctr_code', 'bulan', 'value', 'netweight', 'comodity_code'], unique=False, postgresql_where='((ctr_code IS NOT NULL) AND (value IS NOT NULL))')
    op.create_index('idx_export_data_commodity_country', 'export_data', ['comodity_code', 'ctr_code', 'netweight'], unique=False, postgresql_where='((comodity_code IS NOT NULL) AND (ctr_code IS NOT NULL) AND (netweight IS NOT NULL))')
    op.create_index('idx_export_data_commodity', 'export_data', ['comodity_code'], unique=False, postgresql_where='(comodity_code IS NOT NULL)')
    op.create_index('idx_bps_exim_tahun', 'export_data', ['tahun'], unique=False)
    op.create_index('idx_bps_exim_provorig', 'export_data', ['provorig'], unique=False)
    op.create_index('idx_bps_exim_pod', 'export_data', ['pod'], unique=False)
    op.create_index('idx_bps_exim_ctr', 'export_data', ['ctr'], unique=False)
    op.create_index('idx_bps_exim_created_at', 'export_data', [sa.text('created_at DESC')], unique=False)
    op.alter_column('currency_rates', 'target_currency',
               existing_type=sa.String(length=3),
               type_=sa.CHAR(length=3),
               existing_nullable=False)
    op.alter_column('currency_rates', 'base_currency',
               existing_type=sa.String(length=3),
               type_=sa.CHAR(length=3),
               existing_nullable=False)
    op.create_table('export_recommendations',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('product_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('hs_code', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('recommended_country', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('match_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('margin_estimate', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('shipping_estimate_days', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('generated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='export_recommendations_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='export_recommendations_pkey')
    )
    op.create_table('embeddings',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('embedding', pgvector.sqlalchemy.vector.VECTOR(dim=1536), autoincrement=False, nullable=True),
    sa.Column('usage_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('prompt_template', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('keywords', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='embeddings_pkey')
    )
    op.create_table('user_profiles',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('business_type', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('product_focus', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('capacity_per_month', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('certifications', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('export_experience', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('target_countries', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('constraints', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('preferred_language', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('last_updated', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='user_profiles_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='user_profiles_pkey')
    )
    # ### end Alembic commands ###
